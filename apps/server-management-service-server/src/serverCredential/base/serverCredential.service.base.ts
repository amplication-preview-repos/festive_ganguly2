/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ServerCredential as PrismaServerCredential,
} from "@prisma/client";

export class ServerCredentialServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServerCredentialCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serverCredential.count(args);
  }

  async serverCredentials(
    args: Prisma.ServerCredentialFindManyArgs
  ): Promise<PrismaServerCredential[]> {
    return this.prisma.serverCredential.findMany(args);
  }
  async serverCredential(
    args: Prisma.ServerCredentialFindUniqueArgs
  ): Promise<PrismaServerCredential | null> {
    return this.prisma.serverCredential.findUnique(args);
  }
  async createServerCredential(
    args: Prisma.ServerCredentialCreateArgs
  ): Promise<PrismaServerCredential> {
    return this.prisma.serverCredential.create(args);
  }
  async updateServerCredential(
    args: Prisma.ServerCredentialUpdateArgs
  ): Promise<PrismaServerCredential> {
    return this.prisma.serverCredential.update(args);
  }
  async deleteServerCredential(
    args: Prisma.ServerCredentialDeleteArgs
  ): Promise<PrismaServerCredential> {
    return this.prisma.serverCredential.delete(args);
  }
}
